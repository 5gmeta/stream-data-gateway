{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-ksql-server.fullname" . }}
  labels:
    app: {{ template "cp-ksql-server.name" . }}
    chart: {{ template "cp-ksql-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-ksql-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-ksql-server.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      containers:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.prometheus.jmx.port | quote }}
          - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
          ports:
          - containerPort: {{ .Values.prometheus.jmx.port }}
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-ksql-server
        {{- end }}
        - name: {{ template "cp-ksql-server.name" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: server
              containerPort: {{ .Values.servicePort}}
              protocol: TCP
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: volume-ssl
            mountPath: "/etc/ssl/certs/docker/"
          - name: jar-for-kafka
            mountPath: "/app/"
          {{- if .Values.ksql.headless }}
          - name: ksql-queries
            mountPath: /etc/ksql/queries
          {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              cp /app/* /usr/share/java/ksqldb-server/
              cp /app/* /usr/share/java/cp-base-new/
              /etc/confluent/docker/run 
          env:
          - name: SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-kafka-jaas-secret
                key: SSL_TRUSTSTORE_PASSWORD
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: kafka-client-jaas-secret
                key: CLIENT_ID
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: kafka-client-jaas-secret
                key: CLIENT_SECRET
          - name: KSQL_BOOTSTRAP_SERVERS
            value: {{ template "cp-ksql-server.kafka.bootstrapServers" . }}
          - name: KSQL_KSQL_SERVICE_ID
            value: {{ template "cp-ksql-server.serviceId" . }}
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: {{ template "cp-ksql-server.cp-schema-registry.service-name" . }}
          - name: KSQL_SASL_JAAS_CONFIG
            value: >
                   org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                   oauth.client.id="$(CLIENT_ID)"
                   oauth.client.secret="$(CLIENT_SECRET)"
                   oauth.ssl.endpoint.identification.algorithm=""
                   oauth.token.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/token"
                   oauth.ssl.truststore.location="/etc/ssl/certs/docker/truststore.jks"
                   oauth.ssl.truststore.password="$(SSL_TRUSTSTORE_PASSWORD)";
          - name: KSQL_SECURITY_PROTOCOL
            value: SASL_SSL
          - name: KSQL_SASL_MECHANISM
            value: OAUTHBEARER
          - name: KSQL_SASL_LOGIN_CALLBACK_HANDLER_CLASS
            value: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
          - name: KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
            value:
          - name: KSQL_SSL_KEYSTORE_LOCATION
            value: "/etc/ssl/certs/docker/broker1.jks"
          - name: KSQL_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-kafka-jaas-secret
                key: SSL_KEYSTORE_PASSWORD
          - name: KSQL_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-kafka-jaas-secret
                key: SSL_KEY_PASSWORD
          - name: KSQL_SSL_TRUSTSTORE_LOCATION
            value: "/etc/ssl/certs/docker/truststore.jks"
          - name: KSQL_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-kafka-jaas-secret
                key: SSL_TRUSTSTORE_PASSWORD
          - name: KSQL_HEAP_OPTS
            value: "{{ .Values.heapOptions }}"
          {{- if .Values.ksql.headless }}
          - name: KSQL_KSQL_QUERIES_FILE
            value: /etc/ksql/queries/queries.sql
          {{- else }}
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          {{- end }}
          {{- range $key, $value := .Values.configurationOverrides }}
          - name: {{ printf "KSQL_%s" $key | replace "." "_" | upper | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.jmx.port }}
          - name: JMX_PORT
            value: "{{ .Values.jmx.port }}"
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      - name: volume-ssl
        persistentVolumeClaim:
          claimName: pvc-ssl
      - name: jar-for-kafka
        hostPath:
          path: "/home/meta/jar-for-kafka/"
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-jmx-configmap
      {{- end }}
      {{- if .Values.ksql.headless }}
      - name: ksql-queries
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-ksql-queries-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
