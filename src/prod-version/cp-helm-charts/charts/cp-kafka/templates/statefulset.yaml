{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: {{ template "cp-kafka.fullname" . }}
  labels:
    app: {{ template "cp-kafka.name" . }}
    chart: {{ template "cp-kafka.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  {{- if .Capabilities.APIVersions.Has "apps/v1" }}
  selector:
    matchLabels:
      app: {{ template "cp-kafka.name" . }}
      release: {{ .Release.Name }}
  {{- end }}
  serviceName: {{ template "cp-kafka.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ default 3 .Values.brokers }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "cp-kafka.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      affinity:
      {{- if .Values.affinity }}
{{ toYaml .Values.affinity | indent 8 }}
      {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "cp-kafka.name" . }}
                  - key: "release"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      containers:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: prometheus-jmx-exporter
        image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
        imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - {{ .Values.prometheus.jmx.port | quote }}
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: {{ .Values.prometheus.jmx.port }}
        resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 10 }}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      {{- end }}
      - name: {{ template "cp-kafka.name" . }}-broker
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        {{- if .Values.securityContext }}
        securityContext: {{- toYaml .Values.securityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 9092
          name: kafka
        {{- if .Values.prometheus.jmx.enabled }}
        - containerPort: {{ .Values.jmx.port }}
          name: jmx
        {{- end }}
        {{- if .Values.nodeport.enabled }}
          {{- $brokers := .Values.brokers | int }}
          {{- $root := . }}
          {{- range $i, $e := until $brokers }}
        - containerPort: {{ add $root.Values.nodeport.firstListenerPort $i }}
          name: nodeport-{{ $i }}
          {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_TRUSTSTORE_PASSWORD
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: kafka-client-jaas-secret
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: kafka-client-jaas-secret
              key: CLIENT_SECRET
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.heapOptions }}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ include "cp-kafka.cp-zookeeper.service-name" . | quote }}
        - name: KAFKA_LOG_DIRS
          value: {{ include "cp-kafka.log.dirs" . | quote }}
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: REPLICATION
        - name: KAFKA_SASL_ENABLED_MECHANISMS
          value: OAUTHBEARER
        - name: KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL
          value: OAUTHBEARER
        - name: KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_JAAS_CONFIG
          value: >
                  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                  oauth.valid.issuer.uri="https://keycloak:8443/realms/demo"
                  oauth.ssl.truststore.location="/etc/ssl/certs/docker/truststore.jks"
                  oauth.ssl.truststore.password="$(SSL_TRUSTSTORE_PASSWORD)"
                  oauth.jwks.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/certs"
                  oauth.username.claim="preferred_username"
                  oauth.ssl.endpoint.identification.algorithm=""
                  unsecuredLoginStringClaim_sub="unused";
        - name: KAFKA_LISTENER_NAME_REPLICATION_OAUTHBEARER_SASL_JAAS_CONFIG
          value: >
                  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                  oauth.client.id="$(CLIENT_ID)"
                  oauth.client.secret="$(CLIENT_SECRET)"
                  oauth.ssl.endpoint.identification.algorithm=""
                  oauth.token.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/token"
                  oauth.ssl.truststore.location="/etc/ssl/certs/docker/truststore.jks"
                  oauth.ssl.truststore.password="$(SSL_TRUSTSTORE_PASSWORD)"
                  oauth.valid.issuer.uri="https://keycloak:8443/realms/demo"
                  oauth.jwks.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/certs"
                  oauth.username.claim="preferred_username";
        - name: KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS
          value: io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler
        - name: KAFKA_LISTENER_NAME_REPLICATION_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS
          value: io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler
        - name: KAFKA_LISTENER_NAME_REPLICATION_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS
          value: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
        - name: KAFKA_PRINCIPAL_BUILDER_CLASS
          value: io.strimzi.kafka.oauth.server.OAuthKafkaPrincipalBuilder
        - name: KAFKA_AUTHORIZER_CLASS_NAME
          value: io.strimzi.kafka.oauth.server.authorizer.KeycloakAuthorizer
        - name: KAFKA_STRIMZI_AUTHORIZATION_TOKEN_ENDPOINT_URI
          value: https://keycloak:8443/realms/demo/protocol/openid-connect/token
        - name: KAFKA_STRIMZI_AUTHORIZATION_CLIENT_ID
          value: "kafka"
        - name: KAFKA_STRIMZI_AUTHORIZATION_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value:
        - name: KAFKA_STRIMZI_AUTHORIZATION_SSL_TRUSTSTORE_LOCATION
          value: /etc/ssl/certs/docker/truststore.jks
        - name: KAFKA_STRIMZI_AUTHORIZATION_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_TRUSTSTORE_PASSWORD
        - name: KAFKA_STRIMZI_AUTHORIZATION_GRANTS_REFRESH_PERIOD_SECONDS
          value: "120"
        - name: KAFKA_STRIMZI_AUTHORIZATION_GRANTS_REFRESH_POOL_SIZE
          value: "10"
        - name: KAFKA_STRIMZI_AUTHORIZATION_HTTP_RETRIES
          value: "3"
        - name: KAFKA_STRIMZI_AUTHORIZATION_CONNECT_TIMEOUT_SECONDS
          value: "10"
        - name: KAFKA_STRIMZI_AUTHORIZATION_GRANTS_REFRESH_PERIOD_SECONDS
          value: "5"
        - name: KAFKA_STRIMZI_AUTHORIZATION_REUSE_GRANTS
          value: "true"
        - name: KAFKA_STRIMZI_AUTHORIZATION_GRANTS_MAX_IDLE_TIME_SECONDS
          value: "600"
        - name: KAFKA_STRIMZI_AUTHORIZATION_DELEGATE_TO_KAFKA_ACL
          value: "false"
        - name: KAFKA_STRIMZI_AUTHORIZATION_CONNECTIONS_MAX_REAUTH_MS
          value: "3600000"
        - name: KAFKA_SUPER_USERS
          value: "User:service-account-kafka"
        - name: KAFKA_OAUTH_USERNAME_CLAIM
          value: "preferred_username"
        - name: KAFKA_SECURITY_PROTOCOL
          value: SASL_SSL
        - name: KAFKA_SSL_KEYSTORE_LOCATION
          value: "/etc/ssl/certs/docker/broker1.jks"
        - name: KAFKA_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_KEYSTORE_PASSWORD
        - name: KAFKA_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_KEY_PASSWORD
        - name: KAFKA_SSL_TRUSTSTORE_LOCATION
          value: "/etc/ssl/certs/docker/truststore.jks"
        - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_TRUSTSTORE_PASSWORD
        - name: KAFKA_SSL_KEYSTORE_TYPE
          value: "JKS"
        - name: KAFKA_SSL_TRUSTSTORE_TYPE
          value: "JKS"
        - name: KAFKA_SSL_CLIENT_AUTH
          value: required
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION
          value: "/etc/ssl/certs/docker/broker1.jks"
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_KEYSTORE_PASSWORD
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_KEY_PASSWORD
        - name: CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION
          value: "/etc/ssl/certs/docker/truststore.jks"
        - name: CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-kafka-jaas-secret
              key: SSL_TRUSTSTORE_PASSWORD
        - name: CONFLUENT_METRICS_REPORTER_SASL_MECHANISM
          value: OAUTHBEARER
        - name: CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL
          value: SASL_SSL
        - name:  CONFLUENT_METRICS_REPORTER_SASL_LOGIN_CALLBACK_HANDLER_CLASS
          value: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
        - name: CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: 
        - name: KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: 
        - name: CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG
          value: >
                  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                  oauth.client.id="$(CLIENT_ID)"
                  oauth.client.secret="$(CLIENT_SECRET)"
                  oauth.ssl.endpoint.identification.algorithm=""
                  oauth.token.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/token"
                  oauth.ssl.truststore.location="/etc/ssl/certs/docker/truststore.jks"
                  oauth.ssl.truststore.password="$(SSL_TRUSTSTORE_PASSWORD)"
                  oauth.valid.issuer.uri="https://keycloak:8443/realms/demo"
                  oauth.jwks.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/certs"
                  oauth.username.claim="preferred_username";
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: {{ printf "SASL_SSL://%s:9092" (include "cp-kafka.cp-kafka-headless.fullname" .) | quote }}
          {{- range $key, $value := .Values.configurationOverrides }}
        - name: {{ printf "KAFKA_%s" $key | replace "." "_" | upper | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value := .Values.customEnv }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.jmx.port }}
        - name: KAFKA_JMX_PORT
          value: "{{ .Values.jmx.port }}"
        {{- end }}
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          cp /app/* /usr/share/java/kafka/
          cp /app/* /usr/share/java/cp-base-new/
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=CLIENT://$POD_NAME.{{ template "cp-kafka.fullname" . }}-headless.$POD_NAMESPACE:9092{{ include "cp-kafka.configuration.advertised.listeners" . }} && \
          exec /etc/confluent/docker/run
        volumeMounts:
          - name: jar-for-kafka
            mountPath: "/app/"
          - name: volume-ssl
            mountPath: "/etc/ssl/certs/docker/"
        {{- if .Values.persistence.enabled }}
          {{- $disksPerBroker := .Values.persistence.disksPerBroker | int }}
          {{- range $k, $e := until $disksPerBroker }}
          - name: datadir-{{$k}}
            mountPath: /opt/kafka/data-{{$k}}
          {{- end }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      volumes:
      - name: volume-ssl
        persistentVolumeClaim:
          claimName: pvc-ssl
      - name: jar-for-kafka
        hostPath: 
          path: "/home/meta/jar-for-kafka/"
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-kafka.fullname" . }}-jmx-configmap
      {{- end }}
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: datadir-0
        persistentVolumeClaim:
          claimName: {{ tpl .Values.persistence.existingClaim . }}
  {{- else if not .Values.persistence.enabled }}
      - name: datadir-0
        emptyDir: {}
  {{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
  {{- $disksPerBroker := .Values.persistence.disksPerBroker | int }}
  {{- $root := . }}
  {{- range $k, $e := until $disksPerBroker }}
  - metadata:
      name: datadir-{{$k}}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ $root.Values.persistence.size }}"
      {{- if $root.Values.persistence.storageClass }}
      {{- if (eq "-" $root.Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ $root.Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
{{- end }}
{{- end }}
