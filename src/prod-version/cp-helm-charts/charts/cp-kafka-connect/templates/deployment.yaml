{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-kafka-connect.fullname" . }}
  labels:
    app: {{ template "cp-kafka-connect.name" . }}
    chart: {{ template "cp-kafka-connect.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-kafka-connect.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-kafka-connect.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      containers:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.prometheus.jmx.port | quote }}
          - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
          ports:
          - containerPort: {{ .Values.prometheus.jmx.port }}
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-connect
        {{- end }}
        - name: {{ template "cp-kafka-connect.name" . }}-server
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          command:
            - /bin/bash
            - -c
            - |
              rm /usr/share/java/kafka/slf4j-log4j12-*.jar
              cp /app/* /usr/share/java/kafka/
              /etc/confluent/docker/run &
              $CUSTOM_SCRIPT_PATH
              sleep infinity
          ports:
            - name: kafka-connect
              containerPort: {{ .Values.servicePort}}
              protocol: TCP
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
            - name: SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ssl-kafka-jaas-secret
                  key: SSL_TRUSTSTORE_PASSWORD
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: kafka-client-jaas-secret
                  key: CLIENT_ID
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: kafka-client-jaas-secret
                  key: CLIENT_SECRET
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: {{ template "cp-kafka-connect.kafka.bootstrapServers" . }}
            - name: CONNECT_GROUP_ID
              value: {{ template "cp-kafka-connect.groupId" . }}
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-config
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-offset
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-status
            - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
              value: {{ template "cp-kafka-connect.cp-schema-registry.service-name" .}}
            - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
              value: {{ template "cp-kafka-connect.cp-schema-registry.service-name" .}}
            - name: CUB_CLASSPATH
              value: '/usr/share/java/confluent-security/connect/*:/usr/share/java/kafka/*:/usr/share/java/cp-base-new/*'
              #- name: CONNECT_PLUGIN_PATH
              #value: "/usr/share/java,/usr/share/confluent-hub-components, /opt/stream-reactor-1.2.3-2.1.0/, /opt/stream-reactor-3.0.1-2.5.0"
            - name: CONNECT_LOG4J_LOGGERS
              value: org.apache.zookeeper=INFO,org.I0Itec.zkclient=INFO,org.reflections=INFO
            - name: CONNECT_KEY_CONVERTER
              value: org.apache.kafka.connect.storage.StringConverter
            - name: CONNECT_VALUE_CONVERTER
              value: io.confluent.connect.avro.AvroConverter
            - name: CONNECT_SASL_JAAS_CONFIG
              value: >
                      org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                      oauth.client.id="$(CLIENT_ID)"
                      oauth.client.secret="$(CLIENT_SECRET)"
                      oauth.ssl.endpoint.identification.algorithm=""
                      oauth.token.endpoint.uri="https://keycloak:8443/realms/demo/protocol/openid-connect/token"
                      oauth.ssl.truststore.location="/etc/ssl/certs/docker/truststore.jks"
                      oauth.ssl.truststore.password="$(SSL_TRUSTSTORE_PASSWORD)";
            - name: CONNECT_SECURITY_PROTOCOL
              value: SASL_SSL
            - name: CONNECT_SASL_MECHANISM
              value: OAUTHBEARER
            - name: CONNECT_SASL_LOGIN_CALLBACK_HANDLER_CLASS
              value: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
            - name: CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: 
            - name: CONNECT_SSL_KEYSTORE_LOCATION
              value: "/etc/ssl/certs/docker/broker1.jks"
            - name: CONNECT_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ssl-kafka-jaas-secret
                  key: SSL_KEYSTORE_PASSWORD
            - name: CONNECT_SSL_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ssl-kafka-jaas-secret
                  key: SSL_KEY_PASSWORD
            - name: CONNECT_SSL_TRUSTSTORE_LOCATION
              value: "/etc/ssl/certs/docker/truststore.jks"
            - name: CONNECT_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ssl-kafka-jaas-secret
                  key: SSL_TRUSTSTORE_PASSWORD
            - name: KAFKA_HEAP_OPTS
              value: "{{ .Values.heapOptions }}"
            {{- range $key, $value := .Values.configurationOverrides }}
            - name: {{ printf "CONNECT_%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.customEnv }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.jmx.port }}
            - name: KAFKA_JMX_PORT
              value: "{{ .Values.jmx.port }}"
            {{- end }}
        {{- if .Values.customEnv.CUSTOM_SCRIPT_PATH }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | trim | indent 12 }}
          {{- end }}
        {{- end }}
          {{- if .Values.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.volumeMounts | indent 10 }}
          {{- end}}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      - name: volume-ssl
        persistentVolumeClaim:
          claimName: pvc-ssl
      - name: jar-for-kafka
        hostPath:
          path: "/home/meta/jar-for-kafka/"
      {{- if .Values.volumes }}
{{ toYaml .Values.volumes | trim | indent 6 }}
      {{- end}}
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-kafka-connect.fullname" . }}-jmx-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
